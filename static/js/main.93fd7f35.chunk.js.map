{"version":3,"sources":["components/Button.js","components/Header.js","components/Home.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Button","react_default","a","createElement","onClick","this","props","text","Component","Header","className","react_router_dom","to","Home","About","request","require","API_URL","App","basename","components_Header","react_router","path","exact","component","Pokemons","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pokemons","sortedBy","filteredBy","searchTerm","_this2","get","then","response","pokemonData","data","results","map","obj","url","id","parseInt","slice","image","concat","setState","arg","e","target","value","refs","nameInput","_this3","filter","poke","name","startsWith","sort","sortBy","i","key","pokemonDetails","bind","src","alt","charAt","toUpperCase","ref","type","placeholder","onKeyUp","handleGetSearchInput","components_Button","handleClickClear","handleClickSort","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93fd7f35.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <button onClick={this.props.onClick}>{this.props.text}</button>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Button;","import React, { Component } from 'react'; \r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className='header-container'>\r\n        <h1>Pokemons</h1>\r\n        <ul>\r\n            <li><Link to=\"/\">Home</Link></li>\r\n            <li><Link to=\"/pokemons\">Pokemons</Link></li>\r\n            <li><Link to=\"/about\">About</Link></li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'; \r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className='appcontainer'>\r\n        <h2>Home</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react'; \r\n\r\nclass About extends Component {\r\n  render() {\r\n    return (\r\n      <div className='appcontainer'>\r\n        <h2>This is an awsome Pokemon page</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\nimport sortBy from 'sort-by';\nimport './App.css';\nimport Button from \"./components/Button.js\"\nimport Header from \"./components/Header.js\"\nimport Home from \"./components/Home.js\"\nimport About from \"./components/About.js\"\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\n\nconst request = require('axios');\nconst API_URL = 'https://pokeapi.co/api/v2/';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename=\"/pokedex\">\n        <div>\n          {/* Navigation / Header */}\n          <Header />\n\n          {/* Main content */}\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/pokemons\" component={Pokemons} />\n          <Route path=\"/about\" component={About} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nclass Pokemons extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pokemons: [],\n      sortedBy: '',\n      filteredBy: '',\n      searchTerm: ''\n    };\n  }\n\n  componentDidMount() {\n    getPokemonData()\n      .then((pokemonData) => {\n        this.setState({\n          pokemons: pokemonData\n        })\n      })\n  }\n\n  handleClickSort(arg) {\n    this.setState({\n      sortedBy: arg,\n    });\n  }\n\n  handleClickFilter(arg) {\n    this.setState({\n      filteredBy: arg,\n    });\n  }\n\n  handleGetSearchInput(e) {\n    this.setState({\n      searchTerm: e.target.value\n    })\n  }\n\n  handleClickClear() {\n    this.setState({\n      searchTerm: ''\n    });\n    this.refs.nameInput.value = '';\n  }\n\n  pokemonDetails(id) {\n    // console.log(id);\n    // getPokemonDetails(id);\n  }\n\n  render() {\n    const pokemons = this.state.pokemons\n      .filter(poke => this.state.searchTerm === '' ? poke : poke.name.startsWith(this.state.searchTerm))\n      .sort(sortBy(this.state.sortedBy))\n      .map((poke, i) => (\n        <div key={poke.id} className='pokeDiv' onClick={this.pokemonDetails.bind(this, poke.id)}>\n          <img src={poke.image} alt='imagetext' />\n          <p className='pokemonname'>#{poke.id}  {firstLetterInNameToUppercase(poke.name)}</p>\n        </div>\n      ));\n\n    return (\n      <div className='appcontainer'>\n        <h2>Find your favourite pokemons</h2>\n        <div className='searchDiv'>\n          <input\n            ref=\"nameInput\"\n            type=\"text\"\n            placeholder=\"Search for a pokemon!\"\n            onKeyUp={this.handleGetSearchInput.bind(this)}\n          />\n          <Button onClick={this.handleClickClear.bind(this)} text='Clear search' />\n          <Button onClick={this.handleClickSort.bind(this, 'name')} text='Sort by name' />\n          <Button onClick={this.handleClickSort.bind(this, 'id')} text='Sort by id' />\n        </div>\n        <div className='pokeContainer'>\n          {pokemons}\n        </div>\n      </div>\n    );\n  }\n};\n\n\nexport default App;\n\n// Utility functions\nfunction getIdFromUrl(url) {\n  return parseInt(url.slice(34, -1));\n}\n\nfunction getImageFromId(id) {\n  return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;\n}\n\nfunction firstLetterInNameToUppercase(name) {\n  return name.charAt(0).toUpperCase() + name.slice(1)\n}\n\nfunction getPokemonData() {\n  const promiseOfTransformedData = request.get(API_URL + 'pokemon/?limit=100')\n    .then((response) => {\n      let pokemonData = response.data.results.map((obj) => {\n        obj.id = getIdFromUrl(obj.url)\n        obj.image = getImageFromId(obj.id)\n        return obj;\n      })\n      // console.log(pokemonData);\n      return pokemonData;\n\n    });\n  return promiseOfTransformedData;\n}\n\n// function getPokemonDetails(id) {\n//   const promiseOfTransformedDetails = request.get(API_URL + 'pokemon/' + id)\n//     .then((response) => {\n//       console.log(response.data);\n//       let pokemonDetails = response.data.map((obj) => {\n//         obj.height = this.height\n//         console.log('height: '+obj.height);\n\n//         return obj;\n//       })\n//       console.log(pokemonDetails);\n\n//       return pokemonDetails;\n//     })\n//   return promiseOfTransformedDetails;\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}